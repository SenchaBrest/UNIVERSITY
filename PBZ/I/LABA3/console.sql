CREATE TABLE Зачетки (
    №зачетки INTEGER PRIMARY KEY,
    ФИО TEXT,
    группа TEXT
);

INSERT INTO Зачетки (№зачетки, ФИО, группа) VALUES
(1, 'Иванов Иван', 'Группа A'),
(2, 'Петров Петр', 'Группа B'),
(3, 'Сидоров Сидор', 'Группа A');

-- Добавление новой записи
INSERT INTO Зачетки (№зачетки, ФИО, группа) VALUES (4, 'Козлов Алексей', 'Группа B');

-- Добавление нескольких записей одновременно
INSERT INTO Зачетки (№зачетки, ФИО, группа)
VALUES
(5, 'Смирнова Ольга', 'Группа A'),
(6, 'Николаев Николай', 'Группа C');

-- Изменение группы для определенной записи
UPDATE Зачетки
SET группа = 'Группа D'
WHERE №зачетки = 4;

-- Удаление записи по заданному идентификатору №зачетки
DELETE FROM Зачетки
WHERE №зачетки = 6;

-- Выборка всех записей из таблицы
SELECT * FROM Зачетки;

-- Выборка студентов из "Группа A"
SELECT * FROM Зачетки
WHERE группа = 'Группа A';

-- Выборка студентов из "Группа B" и сортировка по ФИО
SELECT * FROM Зачетки
WHERE группа = 'Группа B'
ORDER BY ФИО;

-- Подсчет количества записей в таблице
SELECT COUNT(*) FROM Зачетки;


-- Фильтр по группе
SELECT * FROM Зачетки
WHERE группа = 'Группа A';

-- Фильтр по ФИО (поиск по части имени)
SELECT * FROM Зачетки
WHERE ФИО LIKE '%Иван%';

-- Фильтр по идентификатору №зачетки
SELECT * FROM Зачетки
WHERE №зачетки = 2;

-- Фильтр для поиска студентов в разных группах
SELECT * FROM Зачетки
WHERE группа IN ('Группа A', 'Группа B');

-- Фильтр с использованием оператора BETWEEN для определенного диапазона значений идентификаторов №зачетки
SELECT * FROM Зачетки
WHERE №зачетки BETWEEN 2 AND 4;

-- Фильтр с использованием оператора <> для исключения определенных значений
-- (например, исключение студентов из "Группа A")
SELECT * FROM Зачетки
WHERE группа <> 'Группа A';

-- Фильтр с использованием логического оператора AND для комбинированных условий
-- (например, поиск студентов из "Группа B" с именем, содержащим "Петр")
SELECT * FROM Зачетки
WHERE группа = 'Группа B' AND ФИО LIKE '%Петр%';





CREATE TABLE Группа (
    Группа TEXT PRIMARY KEY,
    факультет TEXT,
    специальность TEXT
);

INSERT INTO Группа (Группа, факультет, специальность) VALUES
('Группа A', 'Факультет 1', 'Специальность X'),
('Группа B', 'Факультет 2', 'Специальность Y'),
('Группа C', 'Факультет 1', 'Специальность Z');

-- Добавление новой группы
INSERT INTO Группа (Группа, факультет, специальность) VALUES
('Группа D', 'Факультет 3', 'Специальность W');

-- Обновление специальности для "Группа A"
UPDATE Группа
SET специальность = 'Специальность P'
WHERE Группа = 'Группа A';

-- Удаление группы "Группа B"
DELETE FROM Группа
WHERE Группа = 'Группа B';

-- Выбор всех записей из таблицы
SELECT * FROM Группа;

-- Выбор групп из факультета "Факультет 1"
SELECT * FROM Группа
WHERE факультет = 'Факультет 1';

-- Выбор групп и сортировка по специальности в алфавитном порядке
SELECT * FROM Группа
ORDER BY специальность ASC;

-- Выборка с ограничением количества строк (первые 2 строки)
SELECT * FROM Группа
LIMIT 2;



-- Фильтр по факультету
SELECT * FROM Группа
WHERE факультет = 'Факультет 1';

-- Фильтр по специальности
SELECT * FROM Группа
WHERE специальность = 'Специальность X';

-- Фильтр по группе
SELECT * FROM Группа
WHERE Группа = 'Группа C';

-- Фильтр по факультету и специальности
SELECT * FROM Группа
WHERE факультет = 'Факультет 1' AND специальность = 'Специальность Z';

-- Фильтр с использованием оператора LIKE для частичного совпадения
SELECT * FROM Группа
WHERE факультет LIKE 'Факультет%';

-- Фильтр с использованием оператора BETWEEN для диапазона значений
SELECT * FROM Группа
WHERE Группа BETWEEN 'Группа A' AND 'Группа C';

-- Фильтр с использованием оператора IN для выбора нескольких значений
SELECT * FROM Группа
WHERE Группа IN ('Группа A', 'Группа B');





CREATE TABLE Студенты (
    ФИО TEXT PRIMARY KEY,
    год_рождения DATE,
    адрес TEXT,
    телефон TEXT
);

INSERT INTO Студенты (ФИО, год_рождения, адрес, телефон) VALUES
('Иванов Иван', '1998-03-15', 'Адрес 1', '123-456-7890'),
('Петров Петр', '1999-07-20', 'Адрес 2', '987-654-3210'),
('Сидоров Сидор', '1997-11-10', 'Адрес 3', '555-123-4567');

--Добавление нового студента в таблицу
INSERT INTO Студенты (ФИО, год_рождения, адрес, телефон) VALUES
('Новый Студент', '2000-05-25', 'Новый Адрес', '111-222-3333');

--Обновление информации о студенте
UPDATE Студенты
SET адрес = 'Измененный Адрес'
WHERE ФИО = 'Иванов Иван';

--Удаление студента из таблицы
DELETE FROM Студенты
WHERE ФИО = 'Петров Петр';

--Выборка всех студентов
SELECT * FROM Студенты;

--Выборка студентов, родившихся после 1998 года
SELECT * FROM Студенты
WHERE год_рождения > '1998-01-01';

--Подсчет количества студентов
SELECT COUNT(*) AS Количество_Студентов FROM Студенты;

--Изменение структуры таблицы для добавления нового столбца
ALTER TABLE Студенты
ADD COLUMN email TEXT;

--Удаление таблицы
DROP TABLE Студенты;



--Фильтр по году рождения, чтобы выбрать студентов, родившихся после 1998 года
SELECT * FROM Студенты
WHERE год_рождения > '1998-12-31';

--Фильтр по адресу, чтобы выбрать студентов с определенным адресом (например, 'Адрес 2')
SELECT * FROM Студенты
WHERE адрес = 'Адрес 2';

--Фильтр по телефонному номеру, чтобы выбрать студентов с определенным номером (например, '555-123-4567')
SELECT * FROM Студенты
WHERE телефон = '555-123-4567';

--Фильтр по имени студента, чтобы выбрать студента с определенным именем (например, 'Иванов Иван')
SELECT * FROM Студенты
WHERE ФИО = 'Иванов Иван';

--Фильтр для поиска студентов, родившихся в конкретный месяц (например, июль):
SELECT * FROM Студенты
WHERE strftime('%m', год_рождения) = '07';

--Фильтр для поиска студентов, чьи имена начинаются с определенной буквы (например, 'С')
SELECT * FROM Студенты
WHERE ФИО LIKE 'С%';

--Фильтр для поиска студентов, у которых не указан адрес (пустое поле):
SELECT * FROM Студенты
WHERE адрес IS NULL;
