
			Функции ввода\вывода в Си.

	 Как вводить и выводить информацию? С точки зрения естественной
     последовательности изложения материала по языку Си функции ввода\вы-
     вода следовало бы рассматривать гораздо позже. Однако они встречают-
     ся почти во всех текстах программ.
	  Сначала будут рассмотрены четыре функции (и их некоторые моди-
     фикации): printf,scanf,putchar,getchar. Первые две предназначены для
     реализации форматного ввода\вывода данных.
	  Функция printf формально описывается следующим образом:
	    printf("управляющая строка",аргумент1,аргумент2...);
     "Управляющая строка" содержит объекты трех типов: обычные символы,
     которые просто выводятся на экран дисплея; специфакации преобразова-
     ния, каждая из которых вызывает вывод на экран значения очередного
     аргумента из последующего списка, и управляющие символьные констан-
     ты.
	  Каждая спецификация преобразования начинается со знака % и закан-
     чивается некоторым символом, задающим преобразования. Между знаком % и
     символом преобразования могут встречаться знаки: ЗНАК МИНУС, указывающий,
     что преобразованный параметр должет быть выровнен влево в своем поле;
     СТРОКА ЦИФР, задающая максимальный размер поля; ТОЧКА, отделяющая размер
     поля от последующей строки цифр; СТРОКА ЦИФР, задающая максимальное чис-
     ло символов< которые нужно вывести, или же количество цифр, которые нуж-
     но вывести справа от десятичной точки в значениях типов Float или double
     СИМВОЛ ДИЛИНЫ l, указывающий , что соответствующий аргумент имеет тип
     long.
	  Символы преобразования:
	  d-значением аргумента является десятичное целое число;
	  o-значением аргумента является восьмеричное целое число;
	  x-значением аргумента является шестнадцатиричное целое число;
	  c-значением аргумента является символ;
	  s-значением аргумента является строка символов(символы строки
	    выводятся до тех пор, пока не встретится признак конца строки
	    или же не будет выведено число символов, заданное точностью);
	  e-значением аргумента является вещественное десятичное число  в
	    експоненциальной форме;
	  f-значением аргумента является вещественное десятичное число с
	    плавающей точкой;
	  g-используется как %e или %f и исключает вывод незначащих нулей;
	  p-значением аргумента является указатель(адрес);
	  u-значением аргумента является беззнаковое целое число;
      Если после знака % записан не символ преобразования то он выводится
      на экран.
      Функция printf использует управляющую строку, чтобы определить сколь-
      ко всего аргументов и каковы их типы(аргументами могут быть перемен-
      ные, константы, выражения, вызовы функции;главное чтобы их значения
      соответствовали заданной спецификации).
	   Среди управляющих символьных констант наиболее часто используют
      следующие:
      \a-для кратковременной подачи звукового сигнала;
      \b-для перевода курсора влево на одну позицию;
      \n-для перехода на новую строку;
      \r-для возврата каретки;
      \t-для горизонтальной табуляции;
      \v-для вертикальной табуляции.

	   Функция scanf формально описывается следующим образом:
	     scanf("управляющая строка",аргумент1,аргумент2...);
      Аргументы scanf должны быть указателями на соответствующие значения
      (перед именем переменной записывается символ &). Назначение указате-
      лей будет подробнее рассмотрено позже.Символ & перед именем перемен-
      ной воспринимается как адрес ячейки, где содержится значение этой
      переменной.
	   "Управляющая строка" содержит спецификации преобразования и ис-
      пользуется для установления количества и типа аргументов. В нее мо-
      гут включаться:  пробелы, символы табуляции и перехода на новую стро-
      ку(все они игнорируются); спецификации преобразования, состоящие из
      знака %, возможно символа *(запрещение присваивания), воозможно числа,
      задающего максимальный размер поля, и самого преобразования; обычные
      символы, кроме % (считается, что они должны совпадать с очередными
      неизвестными символами во входном потоке).
	   В функции scanf допустимы многие из символов преобразования
      функции printf. Например:
       d-на входе ожидается десятичное число;
       o-на входе ожидается восьмиричное число;
       x-на входе ожидается шестнадцатиричное число;
       u-на входе ожидается беззнаковое число;
       c-на входе ожидается появление одиночного символа;
       s-на входе ожидается появление строки символов;
       f-на входе ожидается появление вещественного числа;
       p-на входе ожидается появление указателя(адреса) в виде шестнадца-
	 тиричного числа;
       Перед символами d,o,x,f может стоять буква l. В первых трех случаях
       соответствующие переменные должны иметь тип long, а в последнем -
       -double.
       После выполнения функции scanf осуществляется автоматический пере-
       вод курсора на следующую строку.
	    Существует и самы простой механизм ввода - чтение по одному
       символу из стандартного источника (с клавиатуры) с помощью функции
       getchar. Инструкция вида с=getchar();позволяет присвоить перемен-
       ной с очередной вводимый символ.
	    Обращение putchar(c); позволяет выдать значение переменной с
       (а этим значением является символ) в стандартный выходной поток (на
       экран дисплея).Переменная с должна иметь тип int или char (тип int и
       char в языке CИ можно использовать для переменных в одном выражении).
       Контрольные вопросы:
       1. Ввод информации в Turbo C ?
       2. Вывод информации в Turbo C ?
       3. Общий вид записи оператора ввода scanf в Turbo C?
       4. Общий вид записи оператора вывода printf в Turbo C?
       5. Что такое спцификации преобразования?
       6. Что такое управляющие символьные константы?
       7. Приведите примеры нескольких символов преобразования?
       8. Приведите примеры нескольких  управляющих символьных констант
	  и их назначение?
       9. Назначение "управляющей строки" в операторе scanf?
      10. Назначение "управляющей строки" в операторе printf?










